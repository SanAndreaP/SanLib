import org.codehaus.groovy.runtime.GStringImpl

buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath "com.wynprice.cursemaven:CurseMaven:2.1.1"
    }
}

apply plugin: "com.wynprice.cursemaven"

apply plugin: 'net.minecraftforge.gradle.forge'

apply plugin: 'idea'
idea {
    module {
        inheritOutputDirs = true
    }
}

version = "1.12.2-1.6.0"
group = "de.sanandrew.mods"
archivesBaseName = "SanLib"

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
    options.debug = true
    options.debugOptions.debugLevel = "source,lines,vars"
}

minecraft {
    version = "1.12.2-14.23.5.2811"
    runDir = "run"
    mappings = "snapshot_20180814"
    replace '@FINGERPRINT@', project.findProperty('signSHA1')
    replaceIn "SanLib.java"
}

repositories {
    maven {
        name = "CoFH Maven"
        url = "http://maven.covers1624.net"
    }
	maven {
        name = "MC Moddev Maven"
        url = "http://maven.mcmoddev.com"
    }
}

dependencies {
    deobfCompile "cofh:RedstoneFlux:1.12-2.0.2.3:universal"
    deobfCompile "net.darkhax.tesla:Tesla-1.12.2:1.0.63"
    deobfCompile "curse.maven:ido:2818003"
}

apply plugin: 'maven'
project.ext {
    releaseRepoUrl = "file://${project(':').projectDir}/maven/" as GStringImpl
}

uploadArchives {
    repositories.mavenDeployer {
        pom.artifactId = project.archivesBaseName
        pom.version = project.version
        repository(url: project.releaseRepoUrl)
    }
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    onlyIf {
        project.hasProperty('keyStore')
    }
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

build.finalizedBy signJar
build.finalizedBy uploadArchives

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
    
	rename '(.+_at.cfg)', 'META-INF/$1'
    exclude 'assets/test'
}

jar {
	manifest {
		attributes 'FMLAT': 'sanlib_at.cfg'
	}
}

artifacts {
    archives jar
}